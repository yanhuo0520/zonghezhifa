<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title>打印</title>
		<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
		<link href="../../css/mui.css" rel="stylesheet" />
	</head>
	<body>
		<header class="mui-bar mui-bar-nav">
			<a class="mui-action-back mui-icon mui-icon-left-nav mui-pull-left"></a>
			<a class="mui-icon mui-icon-refreshempty mui-pull-right" id="btnRefresh"></a>
			<h1 class="mui-title">打印</h1>
		</header>
		<div class="mui-content">
			<h5 class="mui-content-padded">未配对蓝牙设备</h5>
			<ul id="list1" class="mui-table-view">
				
			</ul>
			<br>
			<h5 class="mui-content-padded">已配对蓝牙设备</h5>
			<ul id="list2" class="mui-table-view">
				
			</ul>
		</div>
		
		<script src="../../js/mui.js"></script>
		<script type="text/javascript">
			mui.plusReady(function () {
				var Context, BluetoothAdapter, BluetoothDevice;
				// 蓝牙服务与适配
				var BManager, BAdapter, BluetoothSocket, mDevice, receiver;
				var mMain, mUUID;

				var vlist1 = document.getElementById('list1'); //注册容器用来显示未配对设备
				var vlist2 = document.getElementById('list2'); //注册容器用来显示未配对设备
				if(mui.os.android){
					openAndroidBluetooth(); // 打开蓝牙
					setTimeout(// 设置延时，防止蓝牙未完全开启时调用
						function() {
							searchDevices();
							return BAdapter.isEnabled();
						},
						function() {
							getConnectedDevices();  // 获取已连接设备列表
						},
					3000);
				}	
				// 刷新(重新扫描)
				var buttonRefresh = document.getElementById('btnRefresh');
				buttonRefresh.addEventListener('tap', function(event) {
					buttonRefresh.disabled = true;
					if (mui.os.android) {
						searchDevices(); // 扫描
					}
					buttonRefresh.disabled = false;
				});
				mui('#list1').on('tap', 'li', function() {
					connect(this.id);
				});
				mui('#list2').on('tap', 'li', function() {
					// console.log(this.id)
					print(this.id);
				});
				
				/* 打开蓝牙（Android） */
				function openAndroidBluetooth() {
					mMain = plus.android.runtimeMainActivity();
					Context = plus.android.importClass("android.content.Context");
					BManager = mMain.getSystemService(Context.BLUETOOTH_SERVICE);
					plus.android.importClass(BManager); //引入相关的method函数
					BAdapter = BManager.getAdapter();
					plus.android.importClass(BAdapter); //引入相关的method函数，这样之后才会有isEnabled函数支持
					if (!BAdapter.isEnabled()) {
						BAdapter.enable();
					}
				}
				/** 获取已配对的蓝牙设备列表 */
				function getConnectedDevices() {
					if (!BAdapter.isEnabled()) {
						plus.nativeUI.toast('请先打开蓝牙');
						return;
					}
					var lists = BAdapter.getBondedDevices(); //获取配对的设备列表
					plus.android.importClass(lists);
					var iterator = lists.iterator();
					plus.android.importClass(iterator);
					var vlist2 = document.getElementById('list2'); //注册容器用来显示未配对设备
					while (iterator.hasNext()) {
						var d = iterator.next();
						plus.android.importClass(d);
						var li2 = genLi(d);
						vlist2.appendChild(li2);
					}
				}
				/***扫描蓝牙设备 */
				function searchDevices() {
					//console.log("开始搜索设备");
					if (!BAdapter.isEnabled()) {
						plus.nativeUI.toast('请先打开蓝牙');
						return;
					}
					plus.nativeUI.showWaiting('正在搜索设备，请稍后...', {
						back: 'close' // 可取值"none"表示截获处理返回键，但不做任何响应；"close"表示截获处理返回键并关闭等待框；"transmit"表示不截获返回键，向后传递给Webview窗口继续处理（与未显示等待框的情况一致）。 
					});
					vlist1.innerHTML = ''; //清空容器
					vlist2.innerHTML = ''; //清空容器
					// 初始化蓝牙广播接收器 
					initReceiver();
					// 开启搜索
					BAdapter.startDiscovery();
					// 初始化广播信息过滤
					initIntentFilter();
				}
				function initReceiver() {
					BluetoothDevice = plus.android.importClass("android.bluetooth.BluetoothDevice");
					var bdevice = new BluetoothDevice();
					receiver = plus.android.implements('io.dcloud.android.content.BroadcastReceiver', {
						onReceive: function(context, intent) { //实现onReceiver回调函数
							plus.android.importClass(intent); //通过intent实例引入intent类，方便以后的‘.’操作
							// console.log(intent.getAction()); //获取action
							if (intent.getAction() == "android.bluetooth.adapter.action.DISCOVERY_FINISHED") {
								mMain.unregisterReceiver(receiver); //取消监听
								plus.nativeUI.closeWaiting();
							} else {
								BleDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
								//判断是否配对
								if (BleDevice.getBondState() == bdevice.BOND_NONE) {
									// console.log("未配对蓝牙设备：" + BleDevice.getName() + '    ' + BleDevice.getAddress());
									if (!document.getElementById(BleDevice.getAddress())) { //判断防止重复添加
										var li1 = genLi(BleDevice);
										if(BleDevice.getName() != null){
											vlist1.appendChild(li1);
										}
									}
								} else {
									if (!document.getElementById(BleDevice.getAddress())) { //判断防止重复添加
										// console.log("已配对蓝牙设备：" + BleDevice.getName() + '    ' + BleDevice.getAddress());
										var li2 = genLi(BleDevice);
										vlist2.appendChild(li2);
									}
								}
							}
						}
					});
				}
				function initIntentFilter() { // 设置广播信息过滤  
					var IntentFilter = plus.android.importClass('android.content.IntentFilter');
					var filter = new IntentFilter();
					filter.addAction(BluetoothDevice.ACTION_FOUND);
					filter.addAction(BAdapter.ACTION_DISCOVERY_STARTED);
					filter.addAction(BAdapter.ACTION_DISCOVERY_FINISHED);
					filter.addAction(BAdapter.ACTION_STATE_CHANGED);
					// 注册广播接收器，接收并处理搜索结果  
					mMain.registerReceiver(receiver, filter);
				}
				
				function connect(mac_address) { // 查找蓝牙设备
					var unConnected = BAdapter.getRemoteDevice(mac_address);
					if (unConnected) {
						try {
							if (BleDevice.createBond()) { //配对命令.createBond()
								console.log("配对成功");
								getConnectedDevices();
							}
						} catch (e) { //TODO handle the exception
							mui.alert('连接到设备失败');
						}
					}
				}
				//mac_address:打印机的mac地址
				function print(mac_address) {
					if (!mac_address) {
						mui.toast('请选择蓝牙打印机');
						return;
					}
					mMain = plus.android.runtimeMainActivity();
					BluetoothAdapter = plus.android.importClass("android.bluetooth.BluetoothAdapter");
					UUID = plus.android.importClass("java.util.UUID");
					mUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
					BAdapter = BluetoothAdapter.getDefaultAdapter();
					mDevice = BAdapter.getRemoteDevice(mac_address);
					BluetoothSocket = mDevice.createInsecureRfcommSocketToServiceRecord(mUUID);
					plus.android.importClass(mDevice);
					
					if (!BluetoothSocket.isConnected()) {
						console.log('检测到设备未连接，尝试连接....');
						try {
							BluetoothSocket.connect();
						} catch (e) {
							mui.alert('连接超时');  //TODO handle the exception
							return;
						}
					} 
					console.log('设备已连接');
					if (BluetoothSocket.isConnected()) {
						var outputStream = BluetoothSocket.getOutputStream();  
						plus.android.importClass(outputStream);  
						var name = "张三"
						var printCmd="病死动物现场诊断及无害化处理\n\r";
						printCmd+="养殖场户： "+ name +" \n\r";
						var bytes = plus.android.invoke(printCmd, 'getBytes', 'gbk'); 
						outputStream.write([0x1D,0x4C,0x2F,0x00]);// //设置左边距0x2F
						outputStream.write(bytes); 
						var printCmd1 = "李四\n\r";
						var bytes1 = plus.android.invoke(printCmd1, 'getBytes', 'gbk');
						outputStream.write([0x1B,0x24,0x00,0x00]);
						outputStream.write(bytes1); 
						outputStream.flush();  
						device = null //这里关键  
						BluetoothSocket.close(); //必须关闭蓝牙连接否则意外断开的话打印错误  
											
					}

				}
				 function genLi(bleDevice) {
					var li = document.createElement('li');
					li.setAttribute('id', bleDevice.getAddress());
					li.className = 'mui-table-view-cell';
					var a = document.createElement('a');
					a.setAttribute('class', 'mui-navigate-right')
					a.innerText = bleDevice.getName();
					li.appendChild(a);

					return li;
				}
				
			})
			
			
			
		</script>
	</body>

</html>
